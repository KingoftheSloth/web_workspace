/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-30 02:18:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class listAnimal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>API 데이터 출력</title>\r\n");
      out.write("</head>\r\n");
      out.write("<h1>API 데이터 출력 예시</h1>\r\n");
      out.write("<div id=\"infoContainer\"></div>\r\n");
      out.write("<table>\r\n");
      out.write("  <tbody id=\"infoTable\"></tbody>\r\n");
      out.write("</table>\r\n");
      out.write("<div id=\"dataContainer\">\r\n");
      out.write("	<!-- 서버에서 받아온 데이터가 여기에 출력될 것입니다 -->\r\n");
      out.write("</div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("  const xhr = new XMLHttpRequest();\r\n");
      out.write("  // 요청 파라미터를 쿼리스트링으로 설정\r\n");
      out.write("  xhr.open(\r\n");
      out.write("    'GET',\r\n");
      out.write("    'http://apis.data.go.kr/1543061/abandonmentPublicSrvc/abandonmentPublic?serviceKey=ne53vYZ%2FHctQxGJhVLlcKvtvzi%2FHNfY42exeWo4iiO%2FxrJTgFukzupa98bwUDM318BruDv8y8kWtQDh76hClvQ%3D%3D&_type=json&numOfRows=20'\r\n");
      out.write("  );\r\n");
      out.write("  xhr.send();\r\n");
      out.write("  xhr.onload = function () {\r\n");
      out.write("    if (xhr.status == 200) {\r\n");
      out.write("      let response = JSON.parse(xhr.response);\r\n");
      out.write("      let dataContainer = document.getElementById('dataContainer');\r\n");
      out.write("      let infoTable = document.getElementById('infoTable');\r\n");
      out.write("      let items = response.response.body.items.item;\r\n");
      out.write("\r\n");
      out.write("      let infoHtml = '';\r\n");
      out.write("\r\n");
      out.write("      for (let i = 0; i < items.length; i += 3) {\r\n");
      out.write("        infoHtml += '<tr>';\r\n");
      out.write("        for (let j = i; j < i + 3 && j < items.length; j++) {\r\n");
      out.write("          let item = items[j];\r\n");
      out.write("          let processState = item.processState;\r\n");
      out.write("          let kind = item.kindCd;\r\n");
      out.write("          let color = item.colorCd;\r\n");
      out.write("          let special = item.specialMark;\r\n");
      out.write("          let photo = item.popfile; // 사진 파일 URL\r\n");
      out.write("\r\n");
      out.write("          let pick = '찜하기';\r\n");
      out.write("\r\n");
      out.write("          infoHtml +=\r\n");
      out.write("            '<td>' +\r\n");
      out.write("            '<img src=\"' +\r\n");
      out.write("            photo +\r\n");
      out.write("            '\" width=\"30%\">' +\r\n");
      out.write("            '<p><strong>상태:</strong> ' +\r\n");
      out.write("            processState +\r\n");
      out.write("            '</p>' +\r\n");
      out.write("            '<p><strong>견종:</strong> ' +\r\n");
      out.write("            kind +\r\n");
      out.write("            '</p>' +\r\n");
      out.write("            '<p><strong>색:</strong> ' +\r\n");
      out.write("            color +\r\n");
      out.write("            '</p>' +\r\n");
      out.write("            '<p><strong>특이사항:</strong> ' +\r\n");
      out.write("            special +\r\n");
      out.write("            '</p>' +\r\n");
      out.write("            '<button type=\"button\" onclick=\"addToBucket(\\'' +\r\n");
      out.write("            processState +\r\n");
      out.write("            \"', '\" +\r\n");
      out.write("            kind +\r\n");
      out.write("            \"', '\" +\r\n");
      out.write("            color +\r\n");
      out.write("            \"', '\" +\r\n");
      out.write("            special +\r\n");
      out.write("            \"', '\" +\r\n");
      out.write("            photo +\r\n");
      out.write("            \"')\\\">\" +\r\n");
      out.write("            pick +\r\n");
      out.write("            '</button>' +\r\n");
      out.write("            '</td>';\r\n");
      out.write("        }\r\n");
      out.write("        infoHtml += '</tr>';\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      infoTable.innerHTML = infoHtml;\r\n");
      out.write("\r\n");
      out.write("      dataContainer.innerHTML = '<pre>' + JSON.stringify(response, null, 2) + '</pre>';\r\n");
      out.write("    }\r\n");
      out.write("  };\r\n");
      out.write("  \r\n");
      out.write("  function addToBucket(processState, kind, color, special, photo) {\r\n");
      out.write("	    // 폼 생성\r\n");
      out.write("	    let form = document.createElement('form');\r\n");
      out.write("	    form.method = 'POST';\r\n");
      out.write("	    form.action = 'bucket.jsp';\r\n");
      out.write("\r\n");
      out.write("	    // 폼 필드 추가\r\n");
      out.write("	    let photoField = document.createElement('input');\r\n");
      out.write("	    photoField.type = 'hidden';\r\n");
      out.write("	    photoField.name = 'photo';\r\n");
      out.write("	    photoField.value = photo;\r\n");
      out.write("	    form.appendChild(photoField);\r\n");
      out.write("	    \r\n");
      out.write("	    let statusField = document.createElement('input');\r\n");
      out.write("	    statusField.type = 'hidden';\r\n");
      out.write("	    statusField.name = 'processState';\r\n");
      out.write("	    statusField.value = processState;\r\n");
      out.write("	    form.appendChild(statusField);\r\n");
      out.write("\r\n");
      out.write("	    let kindField = document.createElement('input');\r\n");
      out.write("	    kindField.type = 'hidden';\r\n");
      out.write("	    kindField.name = 'kind';\r\n");
      out.write("	    kindField.value = kind;\r\n");
      out.write("	    form.appendChild(kindField);\r\n");
      out.write("\r\n");
      out.write("	    let colorField = document.createElement('input');\r\n");
      out.write("	    colorField.type = 'hidden';\r\n");
      out.write("	    colorField.name = 'color';\r\n");
      out.write("	    colorField.value = color;\r\n");
      out.write("	    form.appendChild(colorField);\r\n");
      out.write("\r\n");
      out.write("	    let specialField = document.createElement('input');\r\n");
      out.write("	    specialField.type = 'hidden';\r\n");
      out.write("	    specialField.name = 'special';\r\n");
      out.write("	    specialField.value = special;\r\n");
      out.write("	    form.appendChild(specialField);\r\n");
      out.write("	    \r\n");
      out.write("	    \r\n");
      out.write("\r\n");
      out.write("	    // 폼 추가 후 제출\r\n");
      out.write("	    document.body.appendChild(form);\r\n");
      out.write("	    form.submit();\r\n");
      out.write("	  }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
