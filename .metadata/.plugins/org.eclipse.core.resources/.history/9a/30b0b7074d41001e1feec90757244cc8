package org.iclass.filter;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
//*.jsp와 같은 url 형식인 모든 요청에 대해 처리될 필터입니다. 
@WebFilter(urlPatterns = {"*.jsp"})
public class SessionFilter extends HttpFilter implements Filter {
//필터 동작을 확인하기 위한 로그 남기기 : getLogger 메서드의 인자는 클래스를 전달 
	private static final Logger logger = LoggerFactory.getLogger(SessionFilter.class);
	
	//필터 동작을 정의할 메서드
	public void destroy() {
		// TODO Auto-generated method stub
	}

	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		
		//메서드의 인자로 전달된 것이 HttpXXXX의 부모 인터페이스이므로 캐스팅이 필요합니다. 
		HttpServletRequest request = (HttpServletRequest)req;
		HttpServletResponse response = (HttpServletResponse) resp;
		
		//getContextPath()는 /jspBoard 를 리턴, getServletPath()는 무엇일까요?
logger.info("::::: 요청 전 session filter : {}", request.getServletContext());
//다음 필터가 있다면 요청(또는 응답)을 전달하고 없으면 요청 또는 응답합니다. 		
chain.doFilter(request, response);
	}
}
